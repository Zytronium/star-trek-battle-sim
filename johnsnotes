Environment Variables
env
PORT=5005              # Port the server runs on
DEBUG=false            # Runs in debug mode if true*
DB_USER=your_username  # Database username
DB_PASSWORD=           # Database password; leave blank if no password
DB_HOST=localhost      # Database host IP
DB_PORT=5432           # Database port
DB_NAME=star_trek_db   # Database name
DB_SSL=true            # Database connection ignores SSL if false

# *: Add debug code in src/middleware/debugLogs.js, or where ever else
#    needed inside `if (process.env.DEBUG?.toLowerCase() === 'true') {}`
Database Schema
The database now contains these tables:

Main Tables:

ships - Contains all starship information

weapons - Weapon systems with combat statistics

defenses - Defensive systems (shields, cloaks, armor)

Relationship Tables:

ship_weapons - Links ships to their weapons with combat modifiers

ship_defenses - Links ships to their defensive systems

Running the Server
Run the server (src/app.js):

bash
npm run start-server
Run the server in debug mode:

bash
npm run debug-server
Database Setup
Create the database:

bash
createdb star_trek_db
If that doesn't work try:

bash
psql postgres -c "CREATE DATABASE star_trek_db;"
Create the tables:

bash
npm run create-db
Verify the schema:

bash
psql star_trek_db
You should see:

sql
star_trek_db=# \dt
                   List of relations
 Schema |     Name      | Type  |      Owner       
--------+---------------+-------+-----------------
 public | defenses      | table | your_username
 public | ship_defenses | table | your_username
 public | ship_weapons  | table | your_username
 public | ships         | table | your_username
 public | weapons       | table | your_username
(5 rows)
Importing Data
To import the CSV data:

bash
npm run import-csv
Successful import will show:

text
Importing weapons...
Loaded 14 rows into weapons
Importing ships with default values...
Loaded 13 ships with default values where needed
Importing ship_weapons relationships...
Loaded 28 rows into ship_weapons
Importing defenses...
Loaded 6 rows into defenses
Importing ship_defenses relationships...
Loaded 24 rows into ship_defenses
All data loaded successfully
Resetting the Database
To completely reset the database:

bash
npm run reset-db
Then repopulate with:

bash
npm run import-csv
Key Features of the Updated System
Automatic Default Values:

Ships missing shield/hull values receive class-appropriate defaults

Example: Galaxy-class gets 1500 shields, Intrepid-class gets 1000

Comprehensive Combat Stats:

Weapons have shield/hull damage multipliers

Defenses have effectiveness ratings

Relationship tables store combat modifiers

Special Effects Handling:

Phased Polaron Beams (shield bypass)

Cloaking Devices (invisibility)

Ablative Armor (damage reduction)

Verification
After import, verify data in psql:

sql
-- Check a ship's complete loadout
SELECT s.name, s.class, s.shield_strength, s.hull_strength,
       w.name AS weapon, sw.damage_multiplier,
       d.name AS defense
FROM ships s
LEFT JOIN ship_weapons sw ON s.ship_id = sw.ship_id
LEFT JOIN weapons w ON sw.weapon_id = w.weapon_id
LEFT JOIN ship_defenses sd ON s.ship_id = sd.ship_id
LEFT JOIN defenses d ON sd.defense_id = d.defense_id
WHERE s.ship_id = 0;  -- USS Enterprise-D
Troubleshooting
Missing CSV Files:

Ensure all CSV files are in the project root:

ships_2.csv

weapons_2.csv

ships_weapons_2.csv

defenses.csv

ship_defenses.csv

Permission Issues:

If getting authentication errors, verify DB_USER/DB_PASSWORD in environment

Data Validation:

The ETL script will warn about unknown weapons/defenses

Check console output for any warnings during import